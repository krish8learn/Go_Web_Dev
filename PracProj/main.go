package main

import (
	"fmt"
	"log"
	"net/http"
	"text/template"
	"time"

	uuid "github.com/satori/go.uuid"
	"golang.org/x/crypto/bcrypt"
)

var tpl *template.Template

func init() {
	tpl = template.Must(template.ParseGlob("templates/*"))
}

func main() {
	http.HandleFunc("/", firstpage)
	http.HandleFunc("/signup", signup)
	http.HandleFunc("/login", login)
	http.HandleFunc("/registrationS", registrationS)
	http.HandleFunc("/data", data)
	http.HandleFunc("/logout", logout) //not showable
	http.Handle("/favicon.ico", http.NotFoundHandler())
	http.ListenAndServe(":8080", nil)
}

type Person struct {
	UserName  string
	PassWord  []byte
	FirstName string
	LastName  string
}

var DBperson = make(map[string]Person) //key --> UserName, value --> Person

type Session struct {
	UserName     string
	LastActivity time.Time
}

var DBsession = map[string]Session{} //key --->SessionID generated by uuid, value ---> sessions

var dbSessionsCleaned time.Time

const sessionLength int = 30

func firstpage(w http.ResponseWriter, req *http.Request) {
	err := tpl.ExecuteTemplate(w, "firstpage.gohtml", nil)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		log.Fatalln("Error while executing firstpage template: ", err)
		return
	}
}

func signup(w http.ResponseWriter, req *http.Request) {

	var person Person
	if req.Method == http.MethodPost {
		firstname := req.FormValue("firstname")
		lastname := req.FormValue("lastname")
		username := req.FormValue("username")
		password := req.FormValue("password")

		bspassword, err := bcrypt.GenerateFromPassword([]byte(password), 1)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			log.Fatalln("Error while encrypting password: ", err)
			return
		}

		person = Person{username, bspassword, firstname, lastname}

		DBperson[username] = person

		cookie := &http.Cookie{
			Name:  "Registration_Session_Cookie",
			Value: username,
		}

		http.SetCookie(w, cookie)

		http.Redirect(w, req, "/registrationS", http.StatusSeeOther)
	}

	err := tpl.ExecuteTemplate(w, "signup.gohtml", person)

	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		log.Fatalln("Error while executing signup template: ", err)
		return
	}
}

func registrationS(w http.ResponseWriter, req *http.Request) {
	cookie, err := req.Cookie("Registration_Session_Cookie")
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		log.Fatalln("Error while receving registration cookie: ", err)
		return
	}

	RegiPerson := DBperson[cookie.Value]

	err = tpl.ExecuteTemplate(w, "registrationS.gohtml", RegiPerson)

	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		log.Fatalln("Error while executing Registration template:", err)
		return
	}
}

func login(w http.ResponseWriter, req *http.Request) {

	var personlogingin Person
	if req.Method == http.MethodPost {
		username := req.FormValue("username")
		password := req.FormValue("password")

		var founduser bool = false
		for key, _ := range DBperson {
			if username == key {
				founduser = true
				personlogingin = DBperson[username]
				err := bcrypt.CompareHashAndPassword(personlogingin.PassWord, []byte(password))
				if err != nil {
					http.Error(w, "Password do not match", http.StatusForbidden)
					return
				} else {
					LoginSessionID, err := uuid.NewV4()
					if err != nil {
						http.Error(w, err.Error(), http.StatusInternalServerError)
						log.Fatalln("Error while generating sessionID", err)
					}
					SessionCookie := &http.Cookie{
						Name:  "LoginSessionCookie",
						Value: LoginSessionID.String(),
					}

					SessionCookie.MaxAge = sessionLength
					DBsession[SessionCookie.Value] = Session{username, time.Now()} //Session{personlogingin.UserName, time.Now()}
					http.SetCookie(w, SessionCookie)
					http.Redirect(w, req, "/data", http.StatusSeeOther)
				}
			}
		}

		if founduser == false {
			http.Error(w, "Wrong UserName", http.StatusNotFound)
			http.Redirect(w, req, "/", http.StatusSeeOther)
			return
		}
	}

	err := tpl.ExecuteTemplate(w, "login.gohtml", personlogingin)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		log.Fatalln("Error in executing templates", err)
		return
	}
}

func data(w http.ResponseWriter, req *http.Request) {

	recieved_cookie, err := req.Cookie("LoginSessionCookie")

	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		log.Fatalln("Error in data page receiving cookie", err)
		return
	}

	ActiveSession := DBsession[recieved_cookie.Value]
	LoginPerson := DBperson[ActiveSession.UserName]

	err = tpl.ExecuteTemplate(w, "data.gohtml", LoginPerson)

	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		log.Fatalln("Error while executing templates", err)
		return
	}

}

func logout(w http.ResponseWriter, req *http.Request) {
	if loggedIn(req) == false {
		http.Redirect(w, req, "/", http.StatusSeeOther)
		return
	}

	session_cookie, err := req.Cookie("LoginSessionCookie")

	if err != nil {
		http.Error(w, "Cant access the cookie", http.StatusInternalServerError)
		return
	}

	//removing the session_cookie from DBsession
	delete(DBsession, session_cookie.Value)

	//removing the cookie
	session_cookie = &http.Cookie{
		MaxAge: -1,
		Value:  "",
	}

	http.SetCookie(w, session_cookie)

	//deleting every session which is passed 30 seconds
	if time.Now().Sub(dbSessionsCleaned) > (time.Second * 30) {
		go cleanSessions()
	}

	http.Redirect(w, req, "/", http.StatusSeeOther)

}

func loggedIn(req *http.Request) bool {
	cookie, err := req.Cookie("LoginSessionCookie")
	if err != nil {
		return false
	}
	session, _ := DBsession[cookie.Value]

	_, ok := DBperson[session.UserName]

	return ok
}

func cleanSessions() {
	fmt.Println("Before Deleting sessions")
	showsessions()
	for k, v := range DBsession {
		if (time.Now().Sub(v.LastActivity)) > (time.Second * 30) {
			delete(DBsession, k)
		}
	}
	showsessions()
}

func showsessions() {
	fmt.Println("********")
	for key, value := range DBsession {
		fmt.Println(key, value.UserName, value.LastActivity)
	}
	fmt.Println("********")
}

//cookie has sessionID, sessionID access the session in DBsession, UserName field in Session
// access the Person in DBperson
